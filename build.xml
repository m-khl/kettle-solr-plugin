<!--===========================================================================
  This is the build file for the Pentaho Data Integration (Kettle) Solr plugin.
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="kettle-solr-plugin" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">


  <description>
    This build file is used to create the Solr core Kettle plugin
    and works with the subfloor.xml file.
  </description>

  <!-- The continuous target is used by CI ... this is the list of -->
  <!-- tasks that the CI machine will run.                         -->
  <!-- DO NOT change the CI machine's ant task .. change this list -->
  <target name="continuous" depends="clean-all,resolve,publish" />

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->
  <target name="default" depends="clean-all,resolve,dist" />

  <target name="create-dot-classpath" depends="resolve,subfloor.create-dot-classpath" />

  <target name="stage" depends="jar" description="generate all the kettle plugin jars">

    <echo>Staging the Kettle plugin ${ivy.artifact.id} ...</echo>

    <!-- copy plugin jar -->
    <mkdir dir="${stage.dir}/${ivy.artifact.id}" />
    <copy todir="${stage.dir}/${ivy.artifact.id}" file="dist/${ivy.artifact.id}-${project.revision}.jar"/>

    <!-- external libs (jdbc etc) -->
    <mkdir dir="${stage.dir}/${ivy.artifact.id}/lib" />
    <if>
      <available file="lib" type="dir" />
      <then>
        <echo>Copying files from lib....</echo>
        <copy todir="${stage.dir}/${ivy.artifact.id}/lib">
          <fileset dir="lib" includes="**/*" />
        </copy>
      </then>
    </if>

    <!-- any other res files
    NO NEED. there is no plugin.xml anymore
             png is packed into jar.
    <if>
      <available file="resources" />
      <then>
        <copy todir="bin/stage/${ivy.artifact.id}">
          <fileset dir="resources" includes="**/*" excludes="**/.vpn" />
        </copy>
      </then>
    </if>
   -->
    <!-- Update the version.xml with the current version of this plugin -->
    <if>
      <available file="${stage.dir}/${ivy.artifact.id}/version.xml" />
      <then>
        <replace file="${stage.dir}/${ivy.artifact.id}/version.xml" token="@TRUNK@" value="${project.revision}" />
      </then>
    </if>
  </target>
	
	  <!-- override of jar target.. this definitely should be moved into common build -->
	  <target name="jar"
	          depends="compile,set-build.id,create-version-file"
	          description="Jars up the bin directory after a compile">
	  <echo> adding pic into ${dist.dir}/${ivy.artifact.id}-${project.revision}.jar </echo>
	  	
	    <jar destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar">
	      <manifest>
	        <attribute name="Implementation-Title" value="${impl.title}" />
	        <attribute name="Implementation-Version" value="${project.revision}.${build.id}" />
	        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
	        <attribute name="Implementation-ProductID" value="${impl.productID}" />
	      </manifest>
	      <fileset dir="${classes.dir}" />
	   
	      <fileset dir="resources" includes="**/*" excludes="**/.vpn" />
	    </jar>
	  </target>

  <!--=======================================================================
        resolve-dev
                
        Resolves for development and compilation.
      =====================================================================-->
  <target name="resolve-dev" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="dev" />
    <ivy:retrieve conf="dev" pattern="${dev-lib.dir}/[module]-[revision](-[classifier]).[ext]" />
    <touch file="${dev-lib.dir}/.kettle-ignore" />
  </target>

  <target name="resolve" depends="subfloor.resolve,resolve-dev" />
  <target name="package" depends="stage" description="generate all the kettle plugin jars">
    <echo>Ignoring creating the Kettle plugin zip for ${ivy.artifact.id} ...
    symlink bin/stage/${ivy.artifact.id} to kettle-dir/plugins/step</echo>
    <!--zip destfile="dist/${ivy.artifact.id}-${project.revision}.zip" basedir="bin/stage" includes="**/*" excludes="**/dev-lib/*" /-->
  </target>

</project>
